"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JointSet = void 0;
const raw_1 = require("../raw");
const joint_1 = require("./joint");
/**
 * A set of joints.
 *
 * To avoid leaking WASM resources, this MUST be freed manually with `jointSet.free()`
 * once you are done using it (and all the joints it created).
 */
class JointSet {
    constructor(raw) {
        this.raw = raw || new raw_1.RawJointSet();
    }
    /**
     * Release the WASM memory occupied by this joint set.
     */
    free() {
        this.raw.free();
        this.raw = undefined;
    }
    /**
     * Creates a new joint and return its integer handle.
     *
     * @param bodies - The set of rigid-bodies containing the bodies the joint is attached to.
     * @param desc - The joint's parameters.
     * @param parent1 - The handle of the first rigid-body this joint is attached to.
     * @param parent2 - The handle of the second rigid-body this joint is attached to.
     */
    createJoint(bodies, desc, parent1, parent2) {
        const rawParams = desc.intoRaw();
        const result = this.raw.createJoint(bodies.raw, rawParams, parent1, parent2);
        rawParams.free();
        return result;
    }
    /**
     * Remove a joint from this set.
     *
     * @param handle - The integer handle of the joint.
     * @param bodies - The set of rigid-bodies containing the rigid-bodies attached by the removed joint.
     * @param wake_up - If `true`, the rigid-bodies attached by the removed joint will be woken-up automatically.
     */
    remove(handle, islands, bodies, wake_up) {
        this.raw.remove(handle, islands.raw, bodies.raw, wake_up);
    }
    /**
     * The number of joints on this set.
     */
    len() {
        return this.raw.len();
    }
    /**
     * Does this set contain a joint with the given handle?
     *
     * @param handle - The joint handle to check.
     */
    contains(handle) {
        return this.raw.contains(handle);
    }
    /**
     * Gets the joint with the given handle.
     *
     * Returns `null` if no joint with the specified handle exists.
     * Note that two distinct calls with the same `handle` will return two
     * different JavaScript objects that both represent the same joint.
     *
     * @param handle - The integer handle of the joint to retrieve.
     */
    get(handle) {
        if (this.raw.contains(handle)) {
            switch (this.raw.jointType(handle)) {
                case joint_1.JointType.Ball:
                    return new joint_1.BallJoint(this.raw, handle);
                case joint_1.JointType.Prismatic:
                    return new joint_1.PrismaticJoint(this.raw, handle);
                case joint_1.JointType.Fixed:
                    return new joint_1.FixedJoint(this.raw, handle);
            }
        }
        else {
            return null;
        }
    }
    /**
     * Applies the given closure to each joints contained by this set.
     *
     * @param f - The closure to apply.
     */
    forEachJoint(f) {
        this.raw.forEachJointHandle((handle) => {
            f(new joint_1.Joint(this.raw, handle));
        });
    }
    /**
     * Applies the given closure to the handle of each joints contained by this set.
     *
     * @param f - The closure to apply.
     */
    forEachJointHandle(f) {
        this.raw.forEachJointHandle(f);
    }
}
exports.JointSet = JointSet;
//# sourceMappingURL=joint_set.js.map
import { VectorOps } from "../math";
import { RawShape } from "../raw";
/**
 * An enumeration representing the type of a shape.
 */
export var ShapeType;
(function (ShapeType) {
    ShapeType[ShapeType["Ball"] = 0] = "Ball";
    ShapeType[ShapeType["Cuboid"] = 1] = "Cuboid";
    ShapeType[ShapeType["Capsule"] = 2] = "Capsule";
    ShapeType[ShapeType["Segment"] = 3] = "Segment";
    ShapeType[ShapeType["Polyline"] = 4] = "Polyline";
    ShapeType[ShapeType["Triangle"] = 5] = "Triangle";
    ShapeType[ShapeType["TriMesh"] = 6] = "TriMesh";
    ShapeType[ShapeType["HeightField"] = 7] = "HeightField";
    // Compound = 8,
    ShapeType[ShapeType["ConvexPolygon"] = 9] = "ConvexPolygon";
    ShapeType[ShapeType["RoundCuboid"] = 10] = "RoundCuboid";
    ShapeType[ShapeType["RoundTriangle"] = 11] = "RoundTriangle";
    ShapeType[ShapeType["RoundConvexPolygon"] = 12] = "RoundConvexPolygon";
})(ShapeType || (ShapeType = {}));
// #endif
/**
 * A shape that is a sphere in 3D and a circle in 2D.
 */
var Ball = /** @class */ (function () {
    /**
     * Creates a new ball with the given radius.
     * @param radius - The balls radius.
     */
    function Ball(radius) {
        this.radius = radius;
    }
    Ball.prototype.intoRaw = function () {
        return RawShape.ball(this.radius);
    };
    return Ball;
}());
export { Ball };
/**
 * A shape that is a box in 3D and a rectangle in 2D.
 */
var Cuboid = /** @class */ (function () {
    // #if DIM2
    /**
     * Creates a new 2D rectangle.
     * @param hx - The half width of the rectangle.
     * @param hy - The helf height of the rectangle.
     */
    function Cuboid(hx, hy) {
        this.halfExtents = VectorOps.new(hx, hy);
    }
    // #endif
    Cuboid.prototype.intoRaw = function () {
        // #if DIM2
        return RawShape.cuboid(this.halfExtents.x, this.halfExtents.y);
        // #endif
    };
    return Cuboid;
}());
export { Cuboid };
/**
 * A shape that is a box in 3D and a rectangle in 2D, with round corners.
 */
var RoundCuboid = /** @class */ (function () {
    // #if DIM2
    /**
     * Creates a new 2D rectangle.
     * @param hx - The half width of the rectangle.
     * @param hy - The helf height of the rectangle.
     * @param borderRadius - The radius of the borders of this cuboid. This will
     *   effectively increase the half-extents of the cuboid by this radius.
     */
    function RoundCuboid(hx, hy, borderRadius) {
        this.halfExtents = VectorOps.new(hx, hy);
        this.borderRadius = borderRadius;
    }
    // #endif
    RoundCuboid.prototype.intoRaw = function () {
        // #if DIM2
        return RawShape.roundCuboid(this.halfExtents.x, this.halfExtents.y, this.borderRadius);
        // #endif
    };
    return RoundCuboid;
}());
export { RoundCuboid };
/**
 * A shape that is a capsule.
 */
var Capsule = /** @class */ (function () {
    /**
     * Creates a new capsule with the given radius and half-height.
     * @param halfHeight - The balls half-height along the `y` axis.
     * @param radius - The balls radius.
     */
    function Capsule(halfHeight, radius) {
        this.halfHeight = halfHeight;
        this.radius = radius;
    }
    Capsule.prototype.intoRaw = function () {
        return RawShape.capsule(this.halfHeight, this.radius);
    };
    return Capsule;
}());
export { Capsule };
/**
 * A shape that is a segment.
 */
var Segment = /** @class */ (function () {
    /**
     * Creates a new segment shape.
     * @param a - The first point of the segment.
     * @param b - The second point of the segment.
     */
    function Segment(a, b) {
        this.a = a;
        this.b = b;
    }
    Segment.prototype.intoRaw = function () {
        var ra = VectorOps.intoRaw(this.a);
        var rb = VectorOps.intoRaw(this.b);
        var result = RawShape.segment(ra, rb);
        ra.free();
        rb.free();
        return result;
    };
    return Segment;
}());
export { Segment };
/**
 * A shape that is a segment.
 */
var Triangle = /** @class */ (function () {
    /**
     * Creates a new triangle shape.
     *
     * @param a - The first point of the triangle.
     * @param b - The second point of the triangle.
     * @param c - The third point of the triangle.
     */
    function Triangle(a, b, c) {
        this.a = a;
        this.b = b;
        this.c = c;
    }
    Triangle.prototype.intoRaw = function () {
        var ra = VectorOps.intoRaw(this.a);
        var rb = VectorOps.intoRaw(this.b);
        var rc = VectorOps.intoRaw(this.c);
        var result = RawShape.triangle(ra, rb, rc);
        ra.free();
        rb.free();
        rc.free();
        return result;
    };
    return Triangle;
}());
export { Triangle };
/**
 * A shape that is a triangle with round borders and a non-zero thickness.
 */
var RoundTriangle = /** @class */ (function () {
    /**
     * Creates a new triangle shape with round corners.
     *
     * @param a - The first point of the triangle.
     * @param b - The second point of the triangle.
     * @param c - The third point of the triangle.
     * @param borderRadius - The radius of the borders of this triangle. In 3D,
     *   this is also equal to half the thickness of the triangle.
     */
    function RoundTriangle(a, b, c, borderRadius) {
        this.a = a;
        this.b = b;
        this.c = c;
        this.borderRadius = borderRadius;
    }
    RoundTriangle.prototype.intoRaw = function () {
        var ra = VectorOps.intoRaw(this.a);
        var rb = VectorOps.intoRaw(this.b);
        var rc = VectorOps.intoRaw(this.c);
        var result = RawShape.roundTriangle(ra, rb, rc, this.borderRadius);
        ra.free();
        rb.free();
        rc.free();
        return result;
    };
    return RoundTriangle;
}());
export { RoundTriangle };
/**
 * A shape that is a triangle mesh.
 */
var Polyline = /** @class */ (function () {
    /**
     * Creates a new polyline shape.
     *
     * @param vertices - The coordinates of the polyline's vertices.
     * @param indices - The indices of the polyline's segments. If this is `null` then
     *    the vertices are assumed to form a line strip.
     */
    function Polyline(vertices, indices) {
        this.vertices = vertices;
        this.indices = !!indices ? indices : new Uint32Array(0);
    }
    Polyline.prototype.intoRaw = function () {
        return RawShape.polyline(this.vertices, this.indices);
    };
    return Polyline;
}());
export { Polyline };
/**
 * A shape that is a triangle mesh.
 */
var TriMesh = /** @class */ (function () {
    /**
     * Creates a new triangle mesh shape.
     *
     * @param vertices - The coordinates of the triangle mesh's vertices.
     * @param indices - The indices of the triangle mesh's triangles.
     */
    function TriMesh(vertices, indices) {
        this.vertices = vertices;
        this.indices = indices;
    }
    TriMesh.prototype.intoRaw = function () {
        return RawShape.trimesh(this.vertices, this.indices);
    };
    return TriMesh;
}());
export { TriMesh };
// #if DIM2
/**
 * A shape that is a convex polygon.
 */
var ConvexPolygon = /** @class */ (function () {
    /**
     * Creates a new convex polygon shape.
     *
     * @param vertices - The coordinates of the convex polygon's vertices.
     * @param skipConvexHullComputation - If set to `true`, the input points will
     *   be assumed to form a convex polyline and no convex-hull computation will
     *   be done automatically.
     */
    function ConvexPolygon(vertices, skipConvexHullComputation) {
        this.vertices = vertices;
        this.skipConvexHullComputation = !!skipConvexHullComputation;
    }
    ConvexPolygon.prototype.intoRaw = function () {
        if (this.skipConvexHullComputation) {
            return RawShape.convexPolyline(this.vertices);
        }
        else {
            return RawShape.convexHull(this.vertices);
        }
    };
    return ConvexPolygon;
}());
export { ConvexPolygon };
/**
 * A shape that is a convex polygon.
 */
var RoundConvexPolygon = /** @class */ (function () {
    /**
     * Creates a new convex polygon shape.
     *
     * @param vertices - The coordinates of the convex polygon's vertices.
     * @param borderRadius - The radius of the borders of this convex polygon.
     * @param skipConvexHullComputation - If set to `true`, the input points will
     *   be assumed to form a convex polyline and no convex-hull computation will
     *   be done automatically.
     */
    function RoundConvexPolygon(vertices, borderRadius, skipConvexHullComputation) {
        this.vertices = vertices;
        this.borderRadius = borderRadius;
        this.skipConvexHullComputation = !!skipConvexHullComputation;
    }
    RoundConvexPolygon.prototype.intoRaw = function () {
        if (this.skipConvexHullComputation) {
            return RawShape.roundConvexPolyline(this.vertices, this.borderRadius);
        }
        else {
            return RawShape.roundConvexHull(this.vertices, this.borderRadius);
        }
    };
    return RoundConvexPolygon;
}());
export { RoundConvexPolygon };
/**
 * A shape that is a heightfield.
 */
var Heightfield = /** @class */ (function () {
    /**
     * Creates a new heightfield shape.
     *
     * @param heights - The heights of the heightfield, along its local `y` axis.
     * @param scale - The scale factor applied to the heightfield.
     */
    function Heightfield(heights, scale) {
        this.heights = heights;
        this.scale = scale;
    }
    Heightfield.prototype.intoRaw = function () {
        var rawScale = VectorOps.intoRaw(this.scale);
        var rawShape = RawShape.heightfield(this.heights, rawScale);
        rawScale.free();
        return rawShape;
    };
    return Heightfield;
}());
export { Heightfield };
// #endif
//# sourceMappingURL=shape.js.map